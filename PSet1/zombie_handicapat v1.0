import java.util.ArrayList;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer.ShapeType;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Shape;

public class MyGdxGame extends ApplicationAdapter {
	
	static int width=1;
	static int height=1;
	final float speed=75;
	final float fspeed=125;
	SpriteBatch batch;
	Texture img;
	BitmapFont font;
	Texture texture,background,background2;
	Vector2 pos,bg,bg2;
	boolean isJumped;
	ShapeRenderer shape;
	private boolean isFalling;
	Rectangle zombie;
	ArrayList<Rectangle> box;
	static float delta;
	private int i=1,j;
	private boolean stop,isFloating;
	
	@Override
	public void create () {
		batch = new SpriteBatch();
		img = new Texture("badlogic.jpg");
		background=new Texture("terrain.png");
		background2=new Texture("terrain.png");
		font=new BitmapFont();
		texture=new Texture(Gdx.files.internal("zomb_loss_single1.png"));
		shape=new ShapeRenderer();
		pos=new Vector2(20,20);
		width=Gdx.graphics.getWidth();
		height=Gdx.graphics.getHeight();
		box=new ArrayList<Rectangle>();
		bg=new Vector2(0,0);
		bg2=new Vector2(Gdx.graphics.getWidth(),0);
		
	}
	
	@Override
	public void dispose(){
		batch.dispose();
		img.dispose();
		font.dispose();
		texture.dispose();
		shape.dispose();
	}

	@Override
	public void render () {
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		Gdx.gl.glClearColor(0, 0, 1, 0);
		delta=Gdx.graphics.getDeltaTime();
		

		while(bg.x+i*200*Gdx.graphics.getWidth()/800<Gdx.graphics.getWidth()){
			box.add(i-1, new Rectangle(bg.x+i*200*Gdx.graphics.getWidth()/800,20*Gdx.graphics.getHeight()/480, 50*Gdx.graphics.getWidth()/800, 50*Gdx.graphics.getHeight()/480));
			i++;
		}
		
		if(Gdx.input.isKeyPressed(Input.Keys.D)){
			stop=false;
			for(j=0;j<box.size();j++)
				if(zombie.overlaps(box.get(j)))
					stop=true;
				if(!stop)
					if(pos.x>Gdx.graphics.getWidth()/2){
						bg.x-=speed*delta*Gdx.graphics.getWidth()/800;
						bg2.x-=speed*delta*Gdx.graphics.getWidth()/800;
						if(bg.x<=-Gdx.graphics.getWidth()){
							bg.x=0;
							bg2.x=Gdx.graphics.getWidth();
							for(j=0;j<box.size();j++){
							
								box.get(j).x+=Gdx.graphics.getWidth();
							}
						
						}
						for(j=0;j<box.size();j++){
							box.get(j).x-=speed*delta*Gdx.graphics.getWidth()/800;
						}
					}else
					pos.x+=speed*Gdx.graphics.getDeltaTime()*Gdx.graphics.getWidth()/800;
		}
		if(Gdx.input.isKeyPressed(Input.Keys.A)){
			stop=false;
			for(j=0;j<box.size();j++)
				if(zombie.overlaps(box.get(j)))
					stop=true;
			if(!stop)		
				pos.x-=speed*Gdx.graphics.getDeltaTime()*Gdx.graphics.getWidth()/800;
			
		}
		/*if(Gdx.input.isKeyPressed(Input.Keys.W)){
			pos.y+=speed*Gdx.graphics.getDeltaTime();
		}
		if(Gdx.input.isKeyPressed(Input.Keys.S)){
			pos.y-=speed*Gdx.graphics.getDeltaTime();
		}*/
		if(Gdx.input.isKeyPressed(Input.Keys.SPACE)){
			if(!isFalling)
				isJumped=true;
		}
		if(Gdx.input.isTouched(1)){
			if(!isFalling)
				isJumped=true;
		}
		if(Gdx.input.isTouched(0)){
			if(Gdx.input.getX()<Gdx.graphics.getWidth()/2){
				stop=false;
				for(j=0;j<box.size();j++)
					if(zombie.overlaps(box.get(j)))
						stop=true;
				if(!stop){
					pos.x-=speed*Gdx.graphics.getDeltaTime()*Gdx.graphics.getWidth()/800;
				}
			}
			else{
				stop=false;
				for(j=0;j<box.size();j++)
					if(zombie.overlaps(box.get(j)))
						stop=true;
					if(!stop)
						if(pos.x>Gdx.graphics.getWidth()/2){
							bg.x-=speed*delta*Gdx.graphics.getWidth()/800;
							bg2.x-=speed*delta*Gdx.graphics.getWidth()/800;
							if(bg.x<=-Gdx.graphics.getWidth()){
								bg.x=0;
								bg2.x=Gdx.graphics.getWidth();
								for(j=0;j<box.size();j++){
								
									box.get(j).x+=Gdx.graphics.getWidth();
								}
							
							}
							for(j=0;j<box.size();j++){
								box.get(j).x-=speed*delta*Gdx.graphics.getWidth()/800;
							}
						}else
						pos.x+=speed*Gdx.graphics.getDeltaTime()*Gdx.graphics.getWidth()/800;
			}
		}
	
		if(isJumped){
			if(pos.y<100*Gdx.graphics.getHeight()/480)
				pos.y+=fspeed*delta*Gdx.graphics.getHeight()/480;
			else{
				isFalling=true;
				isJumped=false;
			}
			
		}
		if(isFalling){
			stop=false;
			for(j=0;j<box.size();j++)
				if(zombie.overlaps(box.get(j)))
					stop=true;
			if(stop){
				pos.y=70*Gdx.graphics.getHeight()/480;
				isFalling=false;
			}
			else	{
				if(pos.y<=20*Gdx.graphics.getHeight()/480){
					pos.y=20*Gdx.graphics.getHeight()/480;
					isFalling=false;
				}
				else
					pos.y-=fspeed*delta*Gdx.graphics.getHeight()/480;
			}
	}
		
	

		
		zombie=new Rectangle(pos.x,pos.y,texture.getWidth()/2*Gdx.graphics.getWidth()/800,texture.getHeight()/2*Gdx.graphics.getHeight()/480);
	
		batch.begin();

		//batch.draw(img,0,0,50,50);
		
		batch.draw(background,bg.x,bg.y,Gdx.graphics.getWidth(),20*Gdx.graphics.getHeight()/480);
		batch.draw(background2,bg2.x,bg2.y,Gdx.graphics.getWidth(),20*Gdx.graphics.getHeight()/480);
		//font.draw(batch,zombie.height+" "+zombie.width+" "+zombie.x+" "+zombie.y,20,300);
		font.draw(batch,""+box.size()+"    "+bg.x,0,300);
		batch.draw(texture,pos.x,pos.y,65*Gdx.graphics.getWidth()/800,87*Gdx.graphics.getHeight()/480);
		batch.end();
		shape.begin(ShapeType.Filled);
	    //Gdx.gl.glLineWidth(5);
	    shape.setColor(1, 1f, 1f, 1f);
	    for(i=0;i<box.size();i++){
	    	shape.rect(box.get(i).x,box.get(i).y,box.get(i).width,box.get(i).height);
	    }
	    shape.end();
	    
	    if(!isJumped && !isFalling){
	    	isFloating=true;
	    	for(j=0;j<box.size();j++){
	    		if(!(zombie.x+zombie.width<box.get(j).x || zombie.x>box.get(j).x+box.get(j).width)){
	    			isFloating=false;
	    		}
	    	}
	    
	    	if(isFloating){
	    		pos.y=20*Gdx.graphics.getHeight()/480;
	    	}
	    	
	    		
	    }
		
	    
	
	    
	    
		

	}
}
